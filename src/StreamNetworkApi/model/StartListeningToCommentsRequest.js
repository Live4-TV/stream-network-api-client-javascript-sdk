/**
 * Live4.tv - Stream Targets
 * Omnichannel for live streaming on social networks  We're glad that you chose to use Live4.tv's API for managing your connection with social networks.   Here in this documentation, you will find a step-by-step for integrating our API.  Feel free to contact us in case you need any help.  The login flow:  ![login flow image](https://api-stream-network.live4.tv/mermaid-diagram-login-flow.png \"Login flow image\") 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contato@live4.tv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StartListeningToCommentsRequest model module.
 * @module StreamNetworkApi/model/StartListeningToCommentsRequest
 * @version 1.0
 */
class StartListeningToCommentsRequest {
    /**
     * Constructs a new <code>StartListeningToCommentsRequest</code>.
     * @alias module:StreamNetworkApi/model/StartListeningToCommentsRequest
     * @param accounts {Array.<String>} An array of social network tokens to create the live stream (the value we return after the login) IMPORTANT! All tokens must be from the same user (userExternalId)
     */
    constructor(accounts) { 
        
        StartListeningToCommentsRequest.initialize(this, accounts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accounts) { 
        obj['accounts'] = accounts;
    }

    /**
     * Constructs a <code>StartListeningToCommentsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:StreamNetworkApi/model/StartListeningToCommentsRequest} obj Optional instance to populate.
     * @return {module:StreamNetworkApi/model/StartListeningToCommentsRequest} The populated <code>StartListeningToCommentsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartListeningToCommentsRequest();

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartListeningToCommentsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartListeningToCommentsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartListeningToCommentsRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['accounts'])) {
            throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
        }

        return true;
    }


}

StartListeningToCommentsRequest.RequiredProperties = ["accounts"];

/**
 * An array of social network tokens to create the live stream (the value we return after the login) IMPORTANT! All tokens must be from the same user (userExternalId)
 * @member {Array.<String>} accounts
 */
StartListeningToCommentsRequest.prototype['accounts'] = undefined;






export default StartListeningToCommentsRequest;

