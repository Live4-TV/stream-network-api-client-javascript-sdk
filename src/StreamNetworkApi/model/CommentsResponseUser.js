/**
 * Live4.tv - Stream Targets
 * Omnichannel for live streaming on social networks  We're glad that you chose to use Live4.tv's API for managing your connection with social networks.   Here in this documentation, you will find a step-by-step for integrating our API.  Feel free to contact us in case you need any help.  The login flow:  ![login flow image](https://api-stream-network.live4.tv/mermaid-diagram-login-flow.png \"Login flow image\") 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contato@live4.tv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentsResponse from './CommentsResponse';

/**
 * The CommentsResponseUser model module.
 * @module StreamNetworkApi/model/CommentsResponseUser
 * @version 1.0
 */
class CommentsResponseUser {
    /**
     * Constructs a new <code>CommentsResponseUser</code>.
     * The user who sent the comment
     * @alias module:StreamNetworkApi/model/CommentsResponseUser
     * @implements module:StreamNetworkApi/model/CommentsResponse
     * @param uuid {String} The unique identifier for the comment
     * @param socialNetwork {String} The social network where the comment was sent to
     * @param message {String} The message of the comment
     * @param sentAt {Number} The timestamp which the comment was sent
     * @param user {module:StreamNetworkApi/model/CommentsResponseUser} 
     */
    constructor(uuid, socialNetwork, message, sentAt, user) { 
        CommentsResponse.initialize(this, uuid, socialNetwork, message, sentAt, user);
        CommentsResponseUser.initialize(this, uuid, socialNetwork, message, sentAt, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid, socialNetwork, message, sentAt, user) { 
        obj['uuid'] = uuid;
        obj['socialNetwork'] = socialNetwork;
        obj['message'] = message;
        obj['sentAt'] = sentAt;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>CommentsResponseUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:StreamNetworkApi/model/CommentsResponseUser} obj Optional instance to populate.
     * @return {module:StreamNetworkApi/model/CommentsResponseUser} The populated <code>CommentsResponseUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentsResponseUser();
            CommentsResponse.constructFromObject(data, obj);

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('socialNetwork')) {
                obj['socialNetwork'] = ApiClient.convertToType(data['socialNetwork'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('sentAt')) {
                obj['sentAt'] = ApiClient.convertToType(data['sentAt'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = CommentsResponseUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommentsResponseUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommentsResponseUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CommentsResponseUser.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['socialNetwork'] && !(typeof data['socialNetwork'] === 'string' || data['socialNetwork'] instanceof String)) {
            throw new Error("Expected the field `socialNetwork` to be a primitive type in the JSON string but got " + data['socialNetwork']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          CommentsResponseUser.validateJSON(data['user']);
        }

        return true;
    }


}

CommentsResponseUser.RequiredProperties = ["uuid", "socialNetwork", "message", "sentAt", "user"];

/**
 * The unique identifier for the comment
 * @member {String} uuid
 */
CommentsResponseUser.prototype['uuid'] = undefined;

/**
 * The social network where the comment was sent to
 * @member {String} socialNetwork
 */
CommentsResponseUser.prototype['socialNetwork'] = undefined;

/**
 * The message of the comment
 * @member {String} message
 */
CommentsResponseUser.prototype['message'] = undefined;

/**
 * The timestamp which the comment was sent
 * @member {Number} sentAt
 */
CommentsResponseUser.prototype['sentAt'] = undefined;

/**
 * @member {module:StreamNetworkApi/model/CommentsResponseUser} user
 */
CommentsResponseUser.prototype['user'] = undefined;


// Implement CommentsResponse interface:
/**
 * The unique identifier for the comment
 * @member {String} uuid
 */
CommentsResponse.prototype['uuid'] = undefined;
/**
 * The social network where the comment was sent to
 * @member {String} socialNetwork
 */
CommentsResponse.prototype['socialNetwork'] = undefined;
/**
 * The message of the comment
 * @member {String} message
 */
CommentsResponse.prototype['message'] = undefined;
/**
 * The timestamp which the comment was sent
 * @member {Number} sentAt
 */
CommentsResponse.prototype['sentAt'] = undefined;
/**
 * @member {module:StreamNetworkApi/model/CommentsResponseUser} user
 */
CommentsResponse.prototype['user'] = undefined;




export default CommentsResponseUser;

