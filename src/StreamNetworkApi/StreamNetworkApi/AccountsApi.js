/**
 * Live4.tv - Stream Targets
 * Omnichannel for live streaming on social networks  We're glad that you chose to use Live4.tv's API for managing your connection with social networks.   Here in this documentation, you will find a step-by-step for integrating our API.  Feel free to contact us in case you need any help.  The login flow:  ![login flow image](https://api-stream-network.live4.tv/mermaid-diagram-login-flow.png \"Login flow image\") 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contato@live4.tv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAuthoriseUrlRequest from '../model/GetAuthoriseUrlRequest';
import HttpExceptionResponse from '../model/HttpExceptionResponse';
import Redirect from '../model/Redirect';
import SocialNetworkAccount from '../model/SocialNetworkAccount';

/**
* Accounts service.
* @module StreamNetworkApi/StreamNetworkApi/AccountsApi
* @version 1.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:StreamNetworkApi/StreamNetworkApi/AccountsApi
    * @class
    * @param {module:StreamNetworkApi/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:StreamNetworkApi/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the socialNetworkAccountControllerGetAccount operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/AccountsApi~socialNetworkAccountControllerGetAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/SocialNetworkAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get social account information logged from user account
     * @param {String} xApiKey 
     * @param {String} userExternalId The user's unique identifier on your system. The same of you use to authorise-url endpoint.
     * @param {String} uuid The reference to the new account that you can use to identify the account. The same of you use to authorise-url endpoint
     * @param {module:StreamNetworkApi/StreamNetworkApi/AccountsApi~socialNetworkAccountControllerGetAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/SocialNetworkAccount}
     */
    socialNetworkAccountControllerGetAccount(xApiKey, userExternalId, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling socialNetworkAccountControllerGetAccount");
      }
      // verify the required parameter 'userExternalId' is set
      if (userExternalId === undefined || userExternalId === null) {
        throw new Error("Missing the required parameter 'userExternalId' when calling socialNetworkAccountControllerGetAccount");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling socialNetworkAccountControllerGetAccount");
      }

      let pathParams = {
        'userExternalId': userExternalId,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SocialNetworkAccount;
      return this.apiClient.callApi(
        '/api/v1/social-network-account/{userExternalId}/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialNetworkAccountControllerGetAuthoriseUrl operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/AccountsApi~socialNetworkAccountControllerGetAuthoriseUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/Redirect} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new social network account (e.g instagram account)
     * @param {String} xApiKey 
     * @param {String} network The social network code
     * @param {module:StreamNetworkApi/model/GetAuthoriseUrlRequest} getAuthoriseUrlRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/AccountsApi~socialNetworkAccountControllerGetAuthoriseUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/Redirect}
     */
    socialNetworkAccountControllerGetAuthoriseUrl(xApiKey, network, getAuthoriseUrlRequest, callback) {
      let postBody = getAuthoriseUrlRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling socialNetworkAccountControllerGetAuthoriseUrl");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling socialNetworkAccountControllerGetAuthoriseUrl");
      }
      // verify the required parameter 'getAuthoriseUrlRequest' is set
      if (getAuthoriseUrlRequest === undefined || getAuthoriseUrlRequest === null) {
        throw new Error("Missing the required parameter 'getAuthoriseUrlRequest' when calling socialNetworkAccountControllerGetAuthoriseUrl");
      }

      let pathParams = {
        'network': network
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Redirect;
      return this.apiClient.callApi(
        '/api/v1/social-network-account/{network}/authorise-url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
