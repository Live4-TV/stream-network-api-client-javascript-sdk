/**
 * Live4.tv - Stream Targets
 * Omnichannel for live streaming on social networks  We're glad that you chose to use Live4.tv's API for managing your connection with social networks.   Here in this documentation, you will find a step-by-step for integrating our API.  Feel free to contact us in case you need any help.  The login flow:  ![login flow image](https://api-stream-network.live4.tv/mermaid-diagram-login-flow.png \"Login flow image\") 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contato@live4.tv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetCommentsResponse from '../model/GetCommentsResponse';
import PostCommentRequest from '../model/PostCommentRequest';
import PostCommentResponse from '../model/PostCommentResponse';
import StartListeningToCommentsRequest from '../model/StartListeningToCommentsRequest';
import StartListeningToCommentsResponse from '../model/StartListeningToCommentsResponse';
import StopListeningToCommentsRequest from '../model/StopListeningToCommentsRequest';
import StopListeningToCommentsResponse from '../model/StopListeningToCommentsResponse';
import ToggleCommentRequest from '../model/ToggleCommentRequest';
import ToggleCommentResponse from '../model/ToggleCommentResponse';

/**
* Comments service.
* @module StreamNetworkApi/StreamNetworkApi/CommentsApi
* @version 1.0
*/
export default class CommentsApi {

    /**
    * Constructs a new CommentsApi. 
    * @alias module:StreamNetworkApi/StreamNetworkApi/CommentsApi
    * @class
    * @param {module:StreamNetworkApi/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:StreamNetworkApi/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the commentsControllerGetComments operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerGetCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/GetCommentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of comments (call it every minute)
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {Number} lastCommentTimestamp The timestamp of the last comment received. If requesting for the first time, you can send 0
     * @param {module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerGetCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/GetCommentsResponse}
     */
    commentsControllerGetComments(xApiKey, uuid, lastCommentTimestamp, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling commentsControllerGetComments");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling commentsControllerGetComments");
      }
      // verify the required parameter 'lastCommentTimestamp' is set
      if (lastCommentTimestamp === undefined || lastCommentTimestamp === null) {
        throw new Error("Missing the required parameter 'lastCommentTimestamp' when calling commentsControllerGetComments");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'lastCommentTimestamp': lastCommentTimestamp
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCommentsResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsControllerMuteComment operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerMuteCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/ToggleCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute comments to the live stream
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {module:StreamNetworkApi/model/ToggleCommentRequest} toggleCommentRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerMuteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/ToggleCommentResponse}
     */
    commentsControllerMuteComment(xApiKey, uuid, toggleCommentRequest, callback) {
      let postBody = toggleCommentRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling commentsControllerMuteComment");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling commentsControllerMuteComment");
      }
      // verify the required parameter 'toggleCommentRequest' is set
      if (toggleCommentRequest === undefined || toggleCommentRequest === null) {
        throw new Error("Missing the required parameter 'toggleCommentRequest' when calling commentsControllerMuteComment");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ToggleCommentResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/comments/mute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsControllerPostComment operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerPostCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/PostCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a comment into the live stream (all accounts)
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {module:StreamNetworkApi/model/PostCommentRequest} postCommentRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerPostCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/PostCommentResponse}
     */
    commentsControllerPostComment(xApiKey, uuid, postCommentRequest, callback) {
      let postBody = postCommentRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling commentsControllerPostComment");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling commentsControllerPostComment");
      }
      // verify the required parameter 'postCommentRequest' is set
      if (postCommentRequest === undefined || postCommentRequest === null) {
        throw new Error("Missing the required parameter 'postCommentRequest' when calling commentsControllerPostComment");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostCommentResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsControllerStartListening operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerStartListeningCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/StartListeningToCommentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start listening comments of the live stream
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {module:StreamNetworkApi/model/StartListeningToCommentsRequest} startListeningToCommentsRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerStartListeningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/StartListeningToCommentsResponse}
     */
    commentsControllerStartListening(xApiKey, uuid, startListeningToCommentsRequest, callback) {
      let postBody = startListeningToCommentsRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling commentsControllerStartListening");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling commentsControllerStartListening");
      }
      // verify the required parameter 'startListeningToCommentsRequest' is set
      if (startListeningToCommentsRequest === undefined || startListeningToCommentsRequest === null) {
        throw new Error("Missing the required parameter 'startListeningToCommentsRequest' when calling commentsControllerStartListening");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartListeningToCommentsResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/comments/start-listening', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsControllerStopListening operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerStopListeningCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/StopListeningToCommentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop listening comments of the live stream
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {module:StreamNetworkApi/model/StopListeningToCommentsRequest} stopListeningToCommentsRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerStopListeningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/StopListeningToCommentsResponse}
     */
    commentsControllerStopListening(xApiKey, uuid, stopListeningToCommentsRequest, callback) {
      let postBody = stopListeningToCommentsRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling commentsControllerStopListening");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling commentsControllerStopListening");
      }
      // verify the required parameter 'stopListeningToCommentsRequest' is set
      if (stopListeningToCommentsRequest === undefined || stopListeningToCommentsRequest === null) {
        throw new Error("Missing the required parameter 'stopListeningToCommentsRequest' when calling commentsControllerStopListening");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopListeningToCommentsResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/comments/stop-listening', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsControllerUnmuteComment operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerUnmuteCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/ToggleCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute comments to the live stream
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {module:StreamNetworkApi/model/ToggleCommentRequest} toggleCommentRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/CommentsApi~commentsControllerUnmuteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/ToggleCommentResponse}
     */
    commentsControllerUnmuteComment(xApiKey, uuid, toggleCommentRequest, callback) {
      let postBody = toggleCommentRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling commentsControllerUnmuteComment");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling commentsControllerUnmuteComment");
      }
      // verify the required parameter 'toggleCommentRequest' is set
      if (toggleCommentRequest === undefined || toggleCommentRequest === null) {
        throw new Error("Missing the required parameter 'toggleCommentRequest' when calling commentsControllerUnmuteComment");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ToggleCommentResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/comments/unmute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
