/**
 * Live4.tv - Stream Networks API
 * Omnichannel for live streaming on social networks  We're glad that you chose to use Live4.tv's API for managing your connection with social networks (currently Instagram).            We understand that Instagram currently restricts users from conducting live broadcasts without their official app.           However, our innovative API empowers users to go live on Instagram without relying on the app itself.        By leveraging our API, users gain access to a stream key, enabling them to seamlessly transmit their live broadcasts using popular software like OBS (Open Broadcaster Software).        This breakthrough feature provides users with the freedom to connect with their audience and share captivating live content on Instagram, all without the constraints of the official app.  The login flow:  ![login flow image](https://api-stream-network.live4.tv/mermaid-diagram-login-flow.png \"Login flow image\") 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contato@live4.tv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAndStartLiveRequest from '../model/CreateAndStartLiveRequest';
import CreateAndStartLiveResponse from '../model/CreateAndStartLiveResponse';
import StopLiveRequest from '../model/StopLiveRequest';
import StopLiveResponse from '../model/StopLiveResponse';

/**
* LiveStreams service.
* @module StreamNetworkApi/StreamNetworkApi/LiveStreamsApi
* @version 1.0.0
*/
export default class LiveStreamsApi {

    /**
    * Constructs a new LiveStreamsApi. 
    * @alias module:StreamNetworkApi/StreamNetworkApi/LiveStreamsApi
    * @class
    * @param {module:StreamNetworkApi/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:StreamNetworkApi/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the liveStreamsControllerCreateAndStartLive operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/LiveStreamsApi~liveStreamsControllerCreateAndStartLiveCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/CreateAndStartLiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a live stream, return the stream key
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {module:StreamNetworkApi/model/CreateAndStartLiveRequest} createAndStartLiveRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/LiveStreamsApi~liveStreamsControllerCreateAndStartLiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/CreateAndStartLiveResponse}
     */
    liveStreamsControllerCreateAndStartLive(xApiKey, uuid, createAndStartLiveRequest, callback) {
      let postBody = createAndStartLiveRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling liveStreamsControllerCreateAndStartLive");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling liveStreamsControllerCreateAndStartLive");
      }
      // verify the required parameter 'createAndStartLiveRequest' is set
      if (createAndStartLiveRequest === undefined || createAndStartLiveRequest === null) {
        throw new Error("Missing the required parameter 'createAndStartLiveRequest' when calling liveStreamsControllerCreateAndStartLive");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAndStartLiveResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/create-and-start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveStreamsControllerStopLive operation.
     * @callback module:StreamNetworkApi/StreamNetworkApi/LiveStreamsApi~liveStreamsControllerStopLiveCallback
     * @param {String} error Error message, if any.
     * @param {module:StreamNetworkApi/model/StopLiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a live stream
     * @param {String} xApiKey 
     * @param {String} uuid The uuid of the live stream
     * @param {module:StreamNetworkApi/model/StopLiveRequest} stopLiveRequest 
     * @param {module:StreamNetworkApi/StreamNetworkApi/LiveStreamsApi~liveStreamsControllerStopLiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:StreamNetworkApi/model/StopLiveResponse}
     */
    liveStreamsControllerStopLive(xApiKey, uuid, stopLiveRequest, callback) {
      let postBody = stopLiveRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling liveStreamsControllerStopLive");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling liveStreamsControllerStopLive");
      }
      // verify the required parameter 'stopLiveRequest' is set
      if (stopLiveRequest === undefined || stopLiveRequest === null) {
        throw new Error("Missing the required parameter 'stopLiveRequest' when calling liveStreamsControllerStopLive");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopLiveResponse;
      return this.apiClient.callApi(
        '/api/v1/live-streams/{uuid}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
